crucible-run(1)
===============
:doctype: manpage

NAME
----
crucible-run - run tests

SYNOPSIS
--------
[verse]
*crucible run* [--fork|--no-fork] [--no-cleanup] [--dump|--no-dump]
               [--jobs=<jobs> | -j <jobs>] [--[no-]separate-cleanup-threads]
               [--use-spir-v|--no-spir-v] [--isolation=<method> | -I <method>]
               [--junit-xml=<junit-xml-file>]
               [<pattern>...]

DESCRIPTION
-----------
Run all tests that match <pattern>.  If no <pattern> is
given, then run all functional tests and stress tests (those whose name matches
"func.\*" or "stress.*").

PATTERN RULES
-------------
Crucible matches each test name against the given glob <pattern>s with
*fnmatch(3)*. The patterns are tested in order from left to right, and the last
matching pattern wins.  If no test pattern is given, then the implied pattern
"*" is used.

Test patterns that begin with \'!' denotes an exclude rule; otherwise the
pattern denotes an include rule. If the first given pattern is an exclude
pattern, then Crucible inserts an implied "*" as the first pattern.

Special tests match only patterns with special prefixes.  Example tests match
only patterns that start with "example.".  Crucible's self tests match only
patterns that start with "self.". As a corollary, special tests do not match
the pattern "*".

OPTIONS
-------
--fork, --no-fork [default: enabled]::
    Run tests outside or inside the test runner's master process. With forking
    enabled, the test runner's master process is protected from test crashes.
    However, forking also makes debugging tests more difficult.

--no-cleanup::
    Disable each test's cleanup phase. This is useful because a test may crash
    during cleanup but otherwise pass.

--dump, --no-dump [default: disabled]::
    Dump (or disable dumping) test images into Crucible's data directory.

-j <jobs>, --jobs=<jobs>::
    Number of tests to run simultaneously. Similar to GNU Make's -j option.

-I <method>, --isolation=<method> [default: method=process]::
    Select the method the runner uses to isolate tests. The runner will start
    each test in a separate process if <method> is "p" or "process", and in
    a separate thread if <method> is "t" or "thread".

--use-spir-v, --no-spir-v [default: enabled]::
    Use (or don't use) SPIR-V shaders when available.

--[no-]separate-cleanup-threads [default: enabled]::
    If enabled, then the test's "result" thread [1] will create a new thread
    in which to run the test's cleanup handlers. If disabled, then the cleanup
    handlers will run directly in the "result" thread.
    +
    This option is useful for detecting and investigating driver bugs that
    occur when objects are created in one thread and destroyed in another.
    +
    [fn1] The test's "result" thread is the one that chooses the test result,
    thus ending the test, usually by calling functions t_pass(), t_fail(), or
    t_assert().

--junit-xml=<junit-xml-file>::
    Write JUnit XML to the given file.

EXAMPLES
--------
* Run all functional tests and stress tests. The following invocations are all
  equivalent.
+
----
$ crucible run
$ crucible run '*'
$ crucible run 'func.*' 'stress.*'
----

* Run all example tests.
+
----
$ crucible run 'example.*'
----

* Run one test.
+
----
$ crucible run func.miptree.2d.levels01
----

* Run multiple tests by name.
+
----
$ crucible run func.miptree.2d.levels01 \
               func.miptree.2d.levels02 \
               func.miptree.cubemap.levels09
----

* Run multiple tests by glob patterns.
+
----
$ crucible run 'func.miptree.cubemap.*' \
               'func.txf.*'
----

* Run all functional tests and stress tests except foo and bar.
+
----
$ crucible run '!foo' '!bar'
----

* Run all functional tests except the fooish tests.
+
----
$ crucible run 'func.*' '!func.fooish.*'
----

SEE ALSO
--------
*crucible-ls-tests(1)*
